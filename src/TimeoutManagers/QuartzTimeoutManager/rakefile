gem 'albacore', '<= 0.1.5'
require 'albacore'
require 'FileUtils'

COMPILE_TARGET = "debug" unless defined?(COMPILE_TARGET)
PLATFORM = "Any CPU" unless defined?(PLATFORM)

build_dir = "#{File.dirname(__FILE__)}/build"

# Change these two to match your solution and project
solution_file = "Timeout.Quartz.sln"
project_directory = "Timeout.Quartz"

task :default => ['build']
 
desc "Prepares the working directory for a new build"
task :clean do
	unless defined?(GLOBAL_BUILD_DIR) then
		FileUtils.rm_rf build_dir
		Dir.mkdir build_dir
	end
end 

desc "Compile the project"
msbuild :compile do |msb|
	msb.properties :configuration => COMPILE_TARGET, :platform => PLATFORM
	msb.targets :Clean, :Build
	msb.solution = File.dirname(__FILE__) + "/#{solution_file}" 
	msb.path_to_command = File.join(ENV['windir'], 'Microsoft.NET', 'Framework', 'v4.0.30319', 'MSBuild.exe') 
end

task :build => [:clean, :compile] do  
	
	if defined?(GLOBAL_BUILD_DIR) then
		copyOutputFiles File.dirname(__FILE__)+ "/#{project_directory}/bin/#{COMPILE_TARGET}", "*.{dll,exe,config,pdb}", "#{GLOBAL_BUILD_DIR}/#{project_directory}"
	else
		copyOutputFiles File.dirname(__FILE__)+ "/#{project_directory}/bin/#{COMPILE_TARGET}", "*.{dll,exe,config,pdb}", build_dir
	end
end 

def copyOutputFiles(fromDir, filePattern, outDir)
  mkdir outDir unless File.exists? outDir
  Dir.glob(File.join(fromDir, filePattern)){|file| 		
	copy(file, outDir) if File.file?(file)
  } 
end